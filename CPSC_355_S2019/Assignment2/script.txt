Script started on 2019-05-22 20:21:31-06:00
]0;haohu.shen@csa2:~/CPSC355/Assignment2haohu.shen@csa2:~/CPSC355/Assignment2$ exitm4 assign2a.asm > assign2a.s && gcc -g -O0 assign2a.s -o assign2a  && gdb assign2a
GNU gdb (GDB) Fedora 8.1.1-4.fc28
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "aarch64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from assign2a...done.
(gdb) l
1	/**
2	 * File:            assign2a.asm
3	 * Author:          Haohu Shen
4	 * UCID:            30063099
5	 * Course Number:   CPSC355
6	 * Instructor:      Tamer Jarada
7	 * Date:            2019/05/22
8	 * Description:
9	 *
10	 * Assignment2 Version1: Integer Multiplication using Add and Shift Operations
(gdb) 
11	 *
12	 * Implements the C Code given for integer multiplication in ARMv8 assembly code.
13	 * 32-bit registers must be used for variables declared using 'int', while 64-bit
14	 * registers for 'long int', m4 macros will also be used to make the code more
15	 * readable.
16	 */
17	
18	fmt0:       .string "multiplier = 0x%08x (%d) multiplicand = 0x%08x (%d)\n\n"   // The string for printing out initial values of variables
19	fmt1:       .string "product = 0x%08x multiplier = 0x%08x\n"                    // The string for printing out product and multiplier
20	fmt2:       .string "64-bit result = 0x%016lx (%ld)\n"                          // The string for printing out 64-bit result
(gdb) 
21	
22	            .balign 4                                                           // Ensure all following instructions are properly aligned
23	            .global main                                                        // Set the "main" label be visible to the linker
24	
25	                                                                // A constant represents the status of 0, whose value is 0
26	                                                                 // A constant represents the status of 1, whose value is 1
27	                                                                // A constant represents the lowerbound of the for-loop counter, whose value is 0
28	                                                               // A constant represents the upperbound of the for-loop counter, whose value is 32
29	
30	                                                       // Use w19 to represent register w19
(gdb) 
31	                                                     // Use w20 to represent register w20
32	                                                          // Use w21 to represent register w21
33	                                                                // Use w22 to represent register w22
34	                                                         // Use w23 to represent register w23
35	                                                           // Use x19 to represent register x19
36	                                                            // Use x20 to represent register x20
37	                                                            // Use x21 to represent register x21
38	                                                                 // Frame Pointer
39	                                                                 // Link Register
40	
(gdb) 
41	main:       stp     x29, x30, [sp, -16]!                                          // Save Frame Pointer and Link Register to the Stack Pointer
42	            mov     x29, sp                                                      // Set FP to the address of the Stack Pointer
43	
44	            // Initialize variables
45	            mov     w20, -16843010                                   // Set the value in w20 as -16843010
46	            mov     w19, 70                                            // Set the value in w19 as 70
47	            mov     w21, 0                                                // Set the value in w21 as 0
48	
49	output0:    // Print out initial values of variables
50	            ldr     x0, =fmt0                                                   // Set fmt0 as the 1st argument of 'printf'
(gdb) 
51	            mov     w1, w19                                            // Set the value in w19 as the 2nd argument of 'printf'
52	            mov     w2, w19                                            // Set the value in w19 as the 3rd argument of 'printf'
53	            mov     w3, w20                                          // Set the value in w20 as the 4th argument of 'printf'
54	            mov     w4, w20                                          // Set the value in w20 as the 5th argument of 'printf'
55	            bl      printf                                                      // Call printf
56	
57	            // Determine if multiplier is negative
58	            mov     w23, 1                                            // Set the value in w23 as 1
59	            cmp     w19, 0                                             // Compare the value in w19 and 0
60	            b.lt    next0                                                       // Branch to label 'next0' if the value in w19 < 0
(gdb) 
61	
62	neg_false:  mov     w23, 0                                           // Set the value in w23 as 0
63	
64	next0:      // Do repeated add and shift
65	            mov     w22, 0                                                  // Set the value in w22 as 0
66	            b       loop_test                                                   // Branch to label 'loop_test' for the pre-loop test
67	
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
69	                                                                                // also setting the condition flags
70	
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
72	            add     w21, w21, w20                        // Add the value in w20 to w21
73	
74	next1:      // Arithmetic shift right the combined product and multiplier
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
77	                                                                                // also setting the condition flags
78	
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
(gdb) 
81	                                                                                // then result in w19
82	
83	            b       next3                                                       // Branch to label 'next3'
84	
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
86	                                                                                // then result in w19
87	
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
90	
(gdb) 
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
93	
94	next4:      // Adjust product register if multiplier is negative
95	            cmp     w23, 1                                            // Compare the value in w23 and 1, which is 1
96	            b.ne    output1                                                     // Branch to label 'output1' if the value in w23 is not 1
97	            sub     w21, w21, w20                        // Subtract the value in w20 from w21
98	
99	output1:    // Print out product and multiplier
100	            ldr     x0, =fmt1                                                   // Set fmt1 as the 1st argument of 'printf'
(gdb) 
101	            mov     w1, w21                                               // Set the value in w21 as the 2nd argument of 'printf'
102	            mov     w2, w19                                            // Set the value in w19 as the 3rd argument of 'printf'
103	            bl      printf                                                      // Call printf
104	
105	combine:    // Combine product and multiplier together
106	            sxtw    x20, w21                                          // Sign extend w21 and put it in x20
107	            and     x20, x20, 0xFFFFFFFF                                // Bitwise AND of the value in x20 and 0xFFFFFFFF
108	                                                                                // then result in x20
109	
110	            lsl     x20, x20, 32                                        // Logical shift the value in x20 over left by 32 bits
(gdb) 
111	            sxtw    x21, w19                                       // Sign extend w19 and put it in x21
112	            and     x21, x21, 0xFFFFFFFF                                // Bitwise AND of the value in x21 and 0xFFFFFFFF
113	                                                                                // then result in x21
114	
115	            add     x19, x20, x21                                  // Set the value in x19 be the sum of the value in
116	                                                                                // x20 and the value in x21
117	
118	output2:    // Print out 64-bit result
119	            ldr     x0, =fmt2                                                   // Set fmt2 as the 1st argument of 'printf'
120	            mov     x1, x19                                                // Set the value in x19 as the 2nd argument of 'printf'
(gdb) 
121	            mov     x2, x19                                                // Set the value in x19 as the 3rd argument of 'printf'
122	            bl      printf                                                      // Call printf
123	
124	ret:        mov     w0, 0                                                       // Return 0 in the 'main' function
125	            ldp     x29, x30, [sp], 16                                            // Restore the state of the FP and LR and post-incrementing SP by +16
126	            ret                                                                 // Return control to OS
(gdb) 
Line number 127 out of range; assign2a.s has 126 lines.
(gdb) b run[K[K[Kmain
Breakpoint 1 at 0x400614: file assign2a.s, line 41.
(gdb) r
Starting program: /home/ugd/haohu.shen/CPSC355/Assignment2/assign2a 
warning: the debug information found in "/usr/lib/debug//usr/lib64/ld-2.27.so.debug" does not match "/lib/ld-linux-aarch64.so.1" (CRC mismatch).

Missing separate debuginfos, use: dnf debuginfo-install glibc-2.27-38.fc28.aarch64
warning: the debug information found in "/usr/lib/debug//lib64/libc-2.27.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).

warning: the debug information found in "/usr/lib/debug//usr/lib64/libc-2.27.so.debug" does not match "/lib64/libc.so.6" (CRC mismatch).


Breakpoint 1, main () at assign2a.s:41
41	main:       stp     x29, x30, [sp, -16]!                                          // Save Frame Pointer and Link Register to the Stack Pointer
(gdb) display $[K[K/i $pc
1: x/i $pc
=> 0x400614 <main>:	stp	x29, x30, [sp, #-16]!
(gdb) display/xd $w19
2: /d $w19 = 4196088
(gdb) display $[K[K.[K/xd $x[1P[C[C[C[C[Kw20
3: /d $w20 = 0
(gdb) dispalt[K[K[Klay [K/d $w21
4: /d $w21 = 4195472
(gdb) diap[K[Ksplay/d $w22
5: /d $w22 = 0
(gdb) ni
42	            mov     x29, sp                                                      // Set FP to the address of the Stack Pointer
1: x/i $pc
=> 0x400618 <main+4>:	mov	x29, sp
2: /d $w19 = 4196088
3: /d $w20 = 0
4: /d $w21 = 4195472
5: /d $w22 = 0
(gdb) 
45	            mov     w20, -16843010                                   // Set the value in w20 as -16843010
1: x/i $pc
=> 0x40061c <main+8>:	mov	w20, #0xfefefefe            	// #-16843010
2: /d $w19 = 4196088
3: /d $w20 = 0
4: /d $w21 = 4195472
5: /d $w22 = 0
(gdb) 
46	            mov     w19, 70                                            // Set the value in w19 as 70
1: x/i $pc
=> 0x400620 <main+12>:	mov	w19, #0x46                  	// #70
2: /d $w19 = 4196088
3: /d $w20 = 4278124286
4: /d $w21 = 4195472
5: /d $w22 = 0
(gdb) 
47	            mov     w21, 0                                                // Set the value in w21 as 0
1: x/i $pc
=> 0x400624 <main+16>:	mov	w21, #0x0                   	// #0
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 4195472
5: /d $w22 = 0
(gdb) 
output0 () at assign2a.s:50
50	            ldr     x0, =fmt0                                                   // Set fmt0 as the 1st argument of 'printf'
1: x/i $pc
=> 0x400628 <output0>:	ldr	x0, 0x4006e0 <ret+16>
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
51	            mov     w1, w19                                            // Set the value in w19 as the 2nd argument of 'printf'
1: x/i $pc
=> 0x40062c <output0+4>:	mov	w1, w19
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
52	            mov     w2, w19                                            // Set the value in w19 as the 3rd argument of 'printf'
1: x/i $pc
=> 0x400630 <output0+8>:	mov	w2, w19
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
53	            mov     w3, w20                                          // Set the value in w20 as the 4th argument of 'printf'
1: x/i $pc
=> 0x400634 <output0+12>:	mov	w3, w20
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
54	            mov     w4, w20                                          // Set the value in w20 as the 5th argument of 'printf'
1: x/i $pc
=> 0x400638 <output0+16>:	mov	w4, w20
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
55	            bl      printf                                                      // Call printf
1: x/i $pc
=> 0x40063c <output0+20>:	bl	0x400480 <printf@plt>
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
multiplier = 0x00000046 (70) multiplicand = 0xfefefefe (-16843010)

58	            mov     w23, 1                                            // Set the value in w23 as 1
1: x/i $pc
=> 0x400640 <output0+24>:	mov	w23, #0x1                   	// #1
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
59	            cmp     w19, 0                                             // Compare the value in w19 and 0
1: x/i $pc
=> 0x400644 <output0+28>:	cmp	w19, #0x0
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
60	            b.lt    next0                                                       // Branch to label 'next0' if the value in w19 < 0
1: x/i $pc
=> 0x400648 <output0+32>:	b.lt	0x400650 <next0>  // b.tstop
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) si
neg_false () at assign2a.s:62
62	neg_false:  mov     w23, 0                                           // Set the value in w23 as 0
1: x/i $pc
=> 0x40064c <neg_false>:	mov	w23, #0x0                   	// #0
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) ni
next0 () at assign2a.s:65
65	            mov     w22, 0                                                  // Set the value in w22 as 0
1: x/i $pc
=> 0x400650 <next0>:	mov	w22, #0x0                   	// #0
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
66	            b       loop_test                                                   // Branch to label 'loop_test' for the pre-loop test
1: x/i $pc
=> 0x400654 <next0+4>:	b	0x400684 <loop_test>
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 70
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 0
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 1
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 1
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 1
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 1
(gdb) 
72	            add     w21, w21, w20                        // Add the value in w20 to w21
1: x/i $pc
=> 0x400660 <loop+8>:	add	w21, w21, w20
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 0
5: /d $w22 = 1
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 35
3: /d $w20 = 4278124286
4: /d $w21 = 4278124286
5: /d $w22 = 1
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4278124286
5: /d $w22 = 1
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4278124286
5: /d $w22 = 1
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4278124286
5: /d $w22 = 1
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4278124286
5: /d $w22 = 1
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4286545791
5: /d $w22 = 1
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4286545791
5: /d $w22 = 2
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4286545791
5: /d $w22 = 2
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4286545791
5: /d $w22 = 2
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4286545791
5: /d $w22 = 2
(gdb) 
72	            add     w21, w21, w20                        // Add the value in w20 to w21
1: x/i $pc
=> 0x400660 <loop+8>:	add	w21, w21, w20
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4286545791
5: /d $w22 = 2
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 17
3: /d $w20 = 4278124286
4: /d $w21 = 4269702781
5: /d $w22 = 2
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 8
3: /d $w20 = 4278124286
4: /d $w21 = 4269702781
5: /d $w22 = 2
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 8
3: /d $w20 = 4278124286
4: /d $w21 = 4269702781
5: /d $w22 = 2
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 8
3: /d $w20 = 4278124286
4: /d $w21 = 4269702781
5: /d $w22 = 2
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4269702781
5: /d $w22 = 2
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4269702781
5: /d $w22 = 2
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 2
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 2147483656
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3221225476
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3221225476
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 3221225476
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4282335038
5: /d $w22 = 3
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 3
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1073741828
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 536870914
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 536870914
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 536870914
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4288651167
5: /d $w22 = 4
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 4
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 2684354562
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4291809231
5: /d $w22 = 5
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4293388263
5: /d $w22 = 5
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4293388263
5: /d $w22 = 6
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4293388263
5: /d $w22 = 6
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4293388263
5: /d $w22 = 6
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4293388263
5: /d $w22 = 6
(gdb) 
72	            add     w21, w21, w20                        // Add the value in w20 to w21
1: x/i $pc
=> 0x400660 <loop+8>:	add	w21, w21, w20
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4293388263
5: /d $w22 = 6
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3489660929
3: /d $w20 = 4278124286
4: /d $w21 = 4276545253
5: /d $w22 = 6
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4276545253
5: /d $w22 = 6
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4276545253
5: /d $w22 = 6
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4276545253
5: /d $w22 = 6
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4276545253
5: /d $w22 = 6
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4276545253
5: /d $w22 = 6
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 6
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3892314112
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 4093640704
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 4093640704
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 4093640704
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4285756274
5: /d $w22 = 7
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 7
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1946157056
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 973078528
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 973078528
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 973078528
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4290361785
5: /d $w22 = 8
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 8
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3120562176
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3707764736
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3707764736
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 3707764736
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4292664540
5: /d $w22 = 9
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 9
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1560281088
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4293815918
5: /d $w22 = 10
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 10
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 780140544
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 390070272
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 390070272
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 390070272
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294391607
5: /d $w22 = 11
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 11
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 2537553920
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294679451
5: /d $w22 = 12
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 12
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3416260608
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294823373
5: /d $w22 = 13
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 13
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3855613952
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 4075290624
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 4075290624
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 4075290624
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294895334
5: /d $w22 = 14
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 14
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1927806976
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 963903488
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 963903488
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 963903488
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294931315
5: /d $w22 = 15
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 15
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3111387136
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294949305
5: /d $w22 = 16
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 16
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3703177216
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3999072256
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3999072256
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 3999072256
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294958300
5: /d $w22 = 17
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 17
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1851588608
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294962798
5: /d $w22 = 18
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 18
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 925794304
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 462897152
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 462897152
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 462897152
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294965047
5: /d $w22 = 19
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 19
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 2610380800
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 




83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966171
5: /d $w22 = 20
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 20
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3452674048
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294966733
5: /d $w22 = 21
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 21
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3873820672
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 4084393984
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 4084393984
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 4084393984
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967014
5: /d $w22 = 22
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 22
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1936910336
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 968455168
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 968455168
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 968455168
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967155
5: /d $w22 = 23
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 23
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3115938816
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967225
5: /d $w22 = 24
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 24
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3705453056
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 4000210176
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 4000210176
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 4000210176
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967260
5: /d $w22 = 25
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 25
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1852726528
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967278
5: /d $w22 = 26
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 26
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 926363264
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 463181632
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 463181632
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 463181632
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967287
5: /d $w22 = 27
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 27
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 2610665280
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967291
5: /d $w22 = 28
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 28
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3452816288
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967293
5: /d $w22 = 29
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 29
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 3873891792
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 4084429544
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 4084429544
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
next2 () at assign2a.s:85
85	next2:      and     w19, w19, 0x7FFFFFFF                      // Bitwise AND of the value in w19 and 0x7FFFFFFF
1: x/i $pc
=> 0x400678 <next2>:	and	w19, w19, #0x7fffffff
2: /d $w19 = 4084429544
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967294
5: /d $w22 = 30
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 30
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
loop () at assign2a.s:68
68	loop:       tst     w19, 0x1                                           // Bitwise AND of the value in w19 and 0x1
1: x/i $pc
=> 0x400658 <loop>:	tst	w19, #0x1
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
71	            b.eq    next1                                                       // Branch to label 'next1' if (multiplier & 0x1) is false
1: x/i $pc
=> 0x40065c <loop+4>:	b.eq	0x400664 <next1>  // b.none
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
next1 () at assign2a.s:75
75	            asr     w19, w19, 1                               // Arithmetic shift right on the value in w19 by 1
1: x/i $pc
=> 0x400664 <next1>:	asr	w19, w19, #1
2: /d $w19 = 1936945896
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
76	            tst     w21, 0x1                                              // Bitwise AND of the value in w21 and 0x1
1: x/i $pc
=> 0x400668 <next1+4>:	tst	w21, #0x1
2: /d $w19 = 968472948
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
79	            b.eq    next2                                                       // Branch to label 'next2' if (product & 0x1) is false
1: x/i $pc
=> 0x40066c <next1+8>:	b.eq	0x400678 <next2>  // b.none
2: /d $w19 = 968472948
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
80	            orr     w19, w19, 0x80000000                      // Bitwise OR the value in w19 and 0x80000000
1: x/i $pc
=> 0x400670 <next1+12>:	orr	w19, w19, #0x80000000
2: /d $w19 = 968472948
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
83	            b       next3                                                       // Branch to label 'next3'
1: x/i $pc
=> 0x400674 <next1+16>:	b	0x40067c <next3>
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
next3 () at assign2a.s:88
88	next3:      asr     w21, w21, 1                                     // Arithmetic shift right on the value in w21 by 1
1: x/i $pc
=> 0x40067c <next3>:	asr	w21, w21, #1
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
89	            add     w22, w22, 1                                                 // Update the value in w22 by increasing 1
1: x/i $pc
=> 0x400680 <next3+4>:	add	w22, w22, #0x1
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 31
(gdb) 
loop_test () at assign2a.s:91
91	loop_test:  cmp     w22, 32                                                  // Compare the value in w22 and 32, which is 32
1: x/i $pc
=> 0x400684 <loop_test>:	cmp	w22, #0x20
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 32
(gdb) 
92	            b.lt    loop                                                        // Branch to the label 'loop' if the value in w22 is less than 32
1: x/i $pc
=> 0x400688 <loop_test+4>:	b.lt	0x400658 <loop>  // b.tstop
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 32
(gdb) 
next4 () at assign2a.s:95
95	            cmp     w23, 1                                            // Compare the value in w23 and 1, which is 1
1: x/i $pc
=> 0x40068c <next4>:	cmp	w23, #0x1
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 32
(gdb) 
96	            b.ne    output1                                                     // Branch to label 'output1' if the value in w23 is not 1
1: x/i $pc
=> 0x400690 <next4+4>:	b.ne	0x400698 <output1>  // b.any
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 32
(gdb) 
output1 () at assign2a.s:100
100	            ldr     x0, =fmt1                                                   // Set fmt1 as the 1st argument of 'printf'
1: x/i $pc
=> 0x400698 <output1>:	ldr	x0, 0x4006e8 <ret+24>
2: /d $w19 = 3115956596
3: /d $w20 = 4278124286
4: /d $w21 = 4294967295
5: /d $w22 = 32
(gdb) undisplay 2
(gdb) undiaply[K[K[K[Ksplay 3
(gdb) undispaly[K[K[Kpla[K[K[Klay w[K5
(gdb) display/d $x19
6: /d $x19 = 3115956596
(gdb) display [K.[K/d $x20
7: /d $x20 = 4278124286
(gdb) display/d $x21
8: /d $x21 = 4294967295
(gdb) ni
101	            mov     w1, w21                                               // Set the value in w21 as the 2nd argument of 'printf'
1: x/i $pc
=> 0x40069c <output1+4>:	mov	w1, w21
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) ni
102	            mov     w2, w19                                            // Set the value in w19 as the 3rd argument of 'printf'
1: x/i $pc
=> 0x4006a0 <output1+8>:	mov	w2, w19
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) ni
103	            bl      printf                                                      // Call printf
1: x/i $pc
=> 0x4006a4 <output1+12>:	bl	0x400480 <printf@plt>
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) i r w1 w2
w1             0xffffffff	4294967295
w2             0xb9b9b974	3115956596
(gdb) si
0x0000000000400480 in printf@plt ()
1: x/i $pc
=> 0x400480 <printf@plt>:	adrp	x16, 0x420000
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) ni
0x0000000000400484 in printf@plt ()
1: x/i $pc
=> 0x400484 <printf@plt+4>:	ldr	x17, [x16, #24]
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) ni
0x0000000000400488 in printf@plt ()
1: x/i $pc
=> 0x400488 <printf@plt+8>:	add	x16, x16, #0x18
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) ni
0x000000000040048c in printf@plt ()
1: x/i $pc
=> 0x40048c <printf@plt+12>:	br	x17
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) si
0x0000ffffbf58a320 in printf () from /lib64/libc.so.6
1: x/i $pc
=> 0xffffbf58a320 <printf>:	stp	x29, x30, [sp, #-304]!
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) s
Single stepping until exit from function printf,
which has no line number information.
combine () at assign2a.s:106
106	            sxtw    x20, w21                                          // Sign extend w21 and put it in x20
1: x/i $pc
=> 0x4006a8 <combine>:	sxtw	x20, w21
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4278124286
8: /d $x21 = 4294967295
(gdb) ni
107	            and     x20, x20, 0xFFFFFFFF                                // Bitwise AND of the value in x20 and 0xFFFFFFFF
1: x/i $pc
=> 0x4006ac <combine+4>:	and	x20, x20, #0xffffffff
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = -1
8: /d $x21 = 4294967295
(gdb) ni
110	            lsl     x20, x20, 32                                        // Logical shift the value in x20 over left by 32 bits
1: x/i $pc
=> 0x4006b0 <combine+8>:	lsl	x20, x20, #32
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = 4294967295
8: /d $x21 = 4294967295
(gdb) ni
111	            sxtw    x21, w19                                       // Sign extend w19 and put it in x21
1: x/i $pc
=> 0x4006b4 <combine+12>:	sxtw	x21, w19
4: /d $w21 = 4294967295
6: /d $x19 = 3115956596
7: /d $x20 = -4294967296
8: /d $x21 = 4294967295
(gdb) 
112	            and     x21, x21, 0xFFFFFFFF                                // Bitwise AND of the value in x21 and 0xFFFFFFFF
1: x/i $pc
=> 0x4006b8 <combine+16>:	and	x21, x21, #0xffffffff
4: /d $w21 = -1179010700
6: /d $x19 = 3115956596
7: /d $x20 = -4294967296
8: /d $x21 = -1179010700
(gdb) 
115	            add     x19, x20, x21                                  // Set the value in x19 be the sum of the value in
1: x/i $pc
=> 0x4006bc <combine+20>:	add	x19, x20, x21
4: /d $w21 = 3115956596
6: /d $x19 = 3115956596
7: /d $x20 = -4294967296
8: /d $x21 = 3115956596
(gdb) 
output2 () at assign2a.s:119
119	            ldr     x0, =fmt2                                                   // Set fmt2 as the 1st argument of 'printf'
1: x/i $pc
=> 0x4006c0 <output2>:	ldr	x0, 0x4006f0 <ret+32>
4: /d $w21 = 3115956596
6: /d $x19 = -1179010700
7: /d $x20 = -4294967296
8: /d $x21 = 3115956596
(gdb) 
120	            mov     x1, x19                                                // Set the value in x19 as the 2nd argument of 'printf'
1: x/i $pc
=> 0x4006c4 <output2+4>:	mov	x1, x19
4: /d $w21 = 3115956596
6: /d $x19 = -1179010700
7: /d $x20 = -4294967296
8: /d $x21 = 3115956596
(gdb) 
121	            mov     x2, x19                                                // Set the value in x19 as the 3rd argument of 'printf'
1: x/i $pc
=> 0x4006c8 <output2+8>:	mov	x2, x19
4: /d $w21 = 3115956596
6: /d $x19 = -1179010700
7: /d $x20 = -4294967296
8: /d $x21 = 3115956596
(gdb) 
122	            bl      printf                                                      // Call printf
1: x/i $pc
=> 0x4006cc <output2+12>:	bl	0x400480 <printf@plt>
4: /d $w21 = 3115956596
6: /d $x19 = -1179010700
7: /d $x20 = -4294967296
8: /d $x21 = 3115956596
(gdb) s
64-bit result = 0xffffffffb9b9b974 (-1179010700)
[Inferior 1 (process 1125) exited normally]
(gdb) exit[Kt
Undefined command: "exit".  Try "help".
(gdb) quit
]0;haohu.shen@csa2:~/CPSC355/Assignment2haohu.shen@csa2:~/CPSC355/Assignment2$ exit
exit

Script done on 2019-05-22 20:37:41-06:00
